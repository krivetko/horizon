#!/srv/horizon/venv/bin/python3
import json
import logging
import re
import os

from telegram import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, ConversationHandler, CallbackQueryHandler
import db_api
import datetime

ADMIN_ID = 212504240
ACCEPTANCE_GROUP = -1001951047584

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

AUTH, FIO, PHONE = range(3)
WORKER_CHOICE, WORKER_NOT_FOUND = range(3, 5)
GIVE_SEARCH, GIVE_CHOOSE_WORKER, GIVE_CHOOSE_REASON = range(6, 9)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    
    user_status = db_api.getUserStatus(update.effective_user.id)
    user_status = None
    if user_status:
        if user_status == 'active':
            keyboard = [
                [
                    InlineKeyboardButton("–ù–∞—á–∏—Å–ª–∏—Ç—å –¥–≤–∏–∂–∫–∏", callback_data=f"give"),
                    InlineKeyboardButton("–ö–æ—à–µ–ª–µ–∫", callback_data=f"wallet")
                ],
                [
                    InlineKeyboardButton("–ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data=f"balance"),
                    InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            name = db_api.get_user_name(update.effective_user.id).split()[1]
            await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}! –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?", reply_markup=reply_markup)
        elif user_status == 'pending':
            await update.message.reply_text('–û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', reply_markup=ReplyKeyboardRemove())
            return ConversationHandler.END
        elif user_status == 'rejected':
            await update.message.reply_text('–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', reply_markup=ReplyKeyboardRemove())
            return ConversationHandler.END
        elif user_status == 'disabled':
            await update.message.reply_text('–£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞', reply_markup=ReplyKeyboardRemove())
            return ConversationHandler.END
    else:
        reply_keyboard = [["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ü—Ä–∞–≤–∏–ª–∞"]]
        await update.message.reply_html("""
–£ –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç üåÖ

–ì–æ—Ä–∏–∑–æ–Ω—Ç - —ç—Ç–æ –Ω–æ–≤—ã–π –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∏ –ø–æ–æ—â—Ä—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—É—é —Ä–∞–±–æ—Ç—É –≤ —Ä–∞–º–∫–∞—Ö –æ—Å–Ω–æ–≤–Ω–æ–π, –ø—Ä–æ–µ–∫—Ç–Ω–æ–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫—Ä–æ—Å—Å—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.

–ù–∞—á–∏—Å–ª—è–π—Ç–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã - ¬´–¥–≤–∏–∂–∫–∏¬ª! –ß–µ–º –±–æ–ª—å—à–µ ¬´–¥–≤–∏–∂–∫–æ–≤¬ª, —Ç–µ–º —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ –ø–æ–æ—â—Ä–µ–Ω–∏–µ!

–î–µ–π—Å—Ç–≤—É–π! –®–∞–≥–Ω–∏ –∑–∞ –ì–æ—Ä–∏–∑–æ–Ω—Ç!
        """, 
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard, resize_keyboard=True
            )
        )
        return AUTH

async def auth(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –§–ò–û:", reply_markup=ReplyKeyboardRemove()
    )
    return FIO

async def get_fio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    context.user_data["fio"] = update.message.text
    logger.info(context.user_data["fio"])
    await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –í–¢–°:", reply_markup=ReplyKeyboardRemove()
    )
    return PHONE 

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    context.user_data["phone"] = update.message.text
    logger.info(context.user_data["phone"])
    user_data = {"fio": context.user_data.pop("fio"), "phone": context.user_data.pop("phone"), "id": user.id}
    db_api.register_user(user_data)
    await send_auth_message(user_data, context)
    await update.message.reply_text(
            "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –í–∞–º –ø–æ—Å—Ç—É–ø–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def send_auth_message(user_data, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
                [
                InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"register_{user_data['id']}"),
                InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject_{user_data['id']}")
            ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=ACCEPTANCE_GROUP, text=f"""–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:
–§–ò–û: {user_data['fio']}
–í–¢–°: {user_data['phone']}
id: {user_data['id']}""", reply_markup=reply_markup)

async def register_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_id = query.data.split('_')[1]
    fio = re.search("–§–ò–û: (?P<fio>.*)", query.message.text)
    if fio:
        #—É–±–µ—Ä–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, —Å–¥–µ–ª–∞–µ–º –±—É–∫–≤—É –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–æ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
        context.user_data['reg_fio'] = ' '.join([re.sub(r'[\W\d_]+', '', s.capitalize()) for s in fio['fio'].lower().split()])
        temp_search = context.user_data['reg_fio'].replace('.', '').split()
        if len(temp_search) > 1:
            if len(''.join(temp_search[1:])) < 3:
                context.user_data['reg_fio'] = ' '.join([temp_search[0], temp_search[1][0]])
        context.user_data['reg_user_id'] = int(user_id)
        context.user_data['reg_message_id'] = query.message.id
        attr_list = ['username', 'first_name', 'last_name']
        user_info = {k: query.from_user[k] for k in attr_list if hasattr(query.from_user, k)}
        username = user_info.pop('username', None)
        if username:
            user_description = f'@{username}'
        else:
            fio = [user_info.pop('first_name', None), user_info.pop('last_name', None)]
            user_description = ' '.join([elem for elem in fio if elem is not None])
        new_text = query.message.text + f'\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_description} –≤—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å". –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–∏—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.'
        await query.edit_message_text(new_text, reply_markup=None)
        #await query.edit_message_reply_markup(reply_markup=None)
        context.user_data['reg_workers_msgs'] = []
        workers = db_api.get_workers(context.user_data['reg_fio'])
        if context.user_data['reg_fio'].find('—ë') > -1:
            context.user_data['reg_fio'] = context.user_data['reg_fio'].replace('—ë', '–µ')
            workers = workers + db_api.get_workers(context.user_data['reg_fio']) 
        if len(workers) > 0:
            msg = await context.bot.send_message(chat_id=query.from_user.id, text="–í–æ—Ç –∫–æ–≥–æ —è –Ω–∞—à–µ–ª –ø–æ –§–ò–û:")
            context.user_data['reg_workers_msgs'].append(msg.id)
            for worker in workers:
                keyboard = [
                        [
                            InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å", callback_data=f"worker_{worker['id']}")
                        ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                msg = await context.bot.send_message(chat_id=query.from_user.id, text=f"""id: {worker['id']}
–§–ò–û: {worker['fio']}
–¢–£: {worker['tu']}
–¢–µ–ª–µ—Ñ–æ–Ω—ã: {worker['phone']}""", reply_markup=reply_markup)
                context.user_data['reg_workers_msgs'].append(msg.id)
            keyboard = [
                [
                    InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å", callback_data=f"worker_{worker['id']}"),
                    InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ id –≤—Ä—É—á–Ω—É—é", callback_data=f"worker_not_found")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.edit_message_reply_markup(chat_id=query.from_user.id, message_id=context.user_data['reg_workers_msgs'][-1], reply_markup=reply_markup)
            return WORKER_CHOICE
        else:
            keyboard = [
                [
                    InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ id –≤—Ä—É—á–Ω—É—é", callback_data=f"worker_not_found")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(chat_id=query.from_user.id, text="–ü–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –§–ò–û –≤ –ë–î —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=reply_markup)
            return WORKER_NOT_FOUND
    else:
        return ConversationHandler.END

async def choose_worker(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    if len(query.data.split('_')) == 2:
        worker_id = query.data.split('_')[1]
        db_api.set_worker(context.user_data['reg_user_id'], worker_id)
        await context.bot.send_message(chat_id=context.user_data['reg_user_id'], text="–í–∞—à–µ —É—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É!")
        text = f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id {context.user_data['reg_user_id']} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
–°–≤—è–∑–∞–Ω —Å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º:
{query.message.text}"""
        await context.bot.edit_message_text(chat_id=ACCEPTANCE_GROUP, message_id=context.user_data['reg_message_id'], text=text)
        for msg in context.user_data['reg_workers_msgs']:
            await context.bot.delete_message(chat_id=query.from_user.id, message_id=msg)
        context.user_data.pop('reg_workers_msgs')
        context.user_data.pop('reg_fio')
        context.user_data.pop('reg_user_id')
        context.user_data.pop('reg_message_id')
        return ConversationHandler.END
    else:
        await context.bot.send_message(chat_id=query.from_user.id, text="–í–≤–µ–¥–∏—Ç–µ id —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –≤—Ä—É—á–Ω—É—é: ")
        return WORKER_NOT_FOUND

async def assign_worker_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    worker_id = int(update.message.text)
    logger.info(worker_id)
    worker = db_api.get_worker_by_id(worker_id)
    if worker:
        db_api.set_worker(context.user_data['reg_user_id'], worker_id)
        await context.bot.send_message(chat_id=context.user_data['reg_user_id'], text="–í–∞—à–µ —É—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É!")
        text = f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id {context.user_data['reg_user_id']} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
–°–≤—è–∑–∞–Ω —Å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º:
id: {worker['id']}
–§–ò–û: {worker['fio']}
–¢–£: {worker['tu']}
–¢–µ–ª–µ—Ñ–æ–Ω—ã: {worker['phone']}"""
        await context.bot.edit_message_text(chat_id=ACCEPTANCE_GROUP, message_id=context.user_data['reg_message_id'], text=text)
        for msg in context.user_data['reg_workers_msgs']:
            await context.bot.delete_message(chat_id=update.message.from_user.id, message_id=msg)
        context.user_data.pop('reg_workers_msgs')
        context.user_data.pop('reg_fio')
        context.user_data.pop('reg_user_id')
        context.user_data.pop('reg_message_id')
    else:
        keyboard = [
                [
                InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"register_{context.user_data['reg_user_id']}"),
                InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject_{context.user_data['reg_user_id']}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.edit_reply_markup(reply_markup=reply_markup)
        await context.bot.send_message(chat_id=ACCEPTANCE_GROUP, text="–†–∞–±–æ—Ç–Ω–∏–∫–æ–≤ —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return ConversationHandler.END

async def reject_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    user_id = query.data.split('_')[1]
    db_api.reject_user({"id": int(user_id)})
    await query.answer()
    new_text = query.message.text + '\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞'
    await query.edit_message_text(text=new_text)
    return ConversationHandler.END

async def wallet_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user = query.from_user
    engines = db_api.get_wallet(int(user.id))
    await context.bot.send_message(chat_id=user.id, text=
            f"–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è {engines} –¥–≤–∏–∂–∫–æ–≤ –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞.")
    await query.message.edit_reply_markup()

async def wallet_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    user_status = db_api.getUserStatus(user.id)
    if user_status:
        if user_status == 'active':
            engines = db_api.get_wallet(int(user.id))
            await context.bot.send_message(chat_id=user.id, text=
                f"–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è {engines} –¥–≤–∏–∂–∫–æ–≤ –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞.")
        else:
            await context.bot.send_message(chat_id=user.id, text=
                f"–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        await context.bot.send_message(chat_id=user.id, text=
            f"–ü–æ—Ö–æ–∂–µ, –í—ã –µ—â–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å –∫–æ–º–∞–Ω–¥—ã /start")

async def balance_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user = query.from_user
    engines = db_api.get_engines(int(user.id))
    await context.bot.send_message(chat_id=user.id, text=
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {engines} –¥–≤–∏–∂–∫–æ–≤")
    await query.message.edit_reply_markup()

async def balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    user_status = db_api.getUserStatus(user.id)
    if user_status:
        if user_status == 'active':
            engines = db_api.get_engines(int(user.id))
            await context.bot.send_message(chat_id=user.id, text=
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {engines} –¥–≤–∏–∂–∫–æ–≤")
        else:
            await context.bot.send_message(chat_id=user.id, text=
                f"–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        await context.bot.send_message(chat_id=user.id, text=
            f"–ü–æ—Ö–æ–∂–µ, –í—ã –µ—â–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å –∫–æ–º–∞–Ω–¥—ã /start")

async def stats_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user = query.from_user
    await context.bot.send_message(chat_id=user.id, text=
            f"–ß—É—Ç—å –ø–æ–∑–∂–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–≤–∏–∂–∫–æ–≤. –û–∂–∏–¥–∞–π—Ç–µ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.")
    await query.message.edit_reply_markup()

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    await update.message.reply_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=ReplyKeyboardRemove()
    )
    keys = [key for key in context.user_data.keys()]
    for key in keys:
        context.user_data.pop(key)
    return ConversationHandler.END

async def cancel_cbq(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user = query.from_user
    await query.message.edit_text(
            f"{query.message.text}\n–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=None
    )
    keys = [key for key in context.user_data.keys()]
    for key in keys:
        context.user_data.pop(key)
    return ConversationHandler.END

async def give_start_cbq(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user = query.from_user
    engines = db_api.get_wallet(int(user.id))
    if engines > 0:
        return await give_start(user.id, update, context)
    else:
        await context.bot.send_message(chat_id=user.id, text=
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –≤—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–≤–∏–∂–∫–∏ :(")
        return ConversationHandler.END
        
async def give_start_cmnd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user 
    engines = db_api.get_wallet(int(user.id))
    if engines > 0:
        return await give_start(user.id, update, context)
    else:
        await context.bot.send_message(chat_id=user.id, text=
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –≤—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–≤–∏–∂–∫–∏ :(")
        return ConversationHandler.END

async def give_start(user_id, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_status = db_api.getUserStatus(user_id)
    if user_status:
        if user_status != 'active':
            await context.bot.send_message(chat_id=user_id, text=
                f"–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return ConversationHandler.END
    else:
        await context.bot.send_message(chat_id=user_id, text=
            f"–ü–æ—Ö–æ–∂–µ, –í—ã –µ—â–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return ConversationHandler.END
    await context.bot.send_message(chat_id=user_id, text=
            "–ö–æ–≥–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–æ—â—Ä–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–æ–ª–ª–µ–≥–∏:")
    return GIVE_SEARCH

async def give_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    search_query = ' '.join([re.sub(r'[\W\d_]+', '', s.capitalize()) for s in update.message.text.lower().split()])
    workers = db_api.get_workers(search_query)
    if len(workers) > 0:
        context.user_data['give_workers_msgs'] = []
        msg = await context.bot.send_message(chat_id=user.id, text="–í–æ—Ç –∫–æ–≥–æ —è –Ω–∞—à–µ–ª –ø–æ –§–ò–û:")
        context.user_data['give_workers_msgs'].append(msg.id)
        for worker in workers:
            keyboard = [
                [
                    InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å", callback_data=f"give_{worker['id']}")
                    ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            msg = await context.bot.send_message(chat_id=user.id, text=f"""–§–ò–û: {worker['fio']}
–¢–£: {worker['tu']}
–¢–µ–ª–µ—Ñ–æ–Ω—ã: {worker['phone']}""", reply_markup=reply_markup)
            context.user_data['give_workers_msgs'].append(msg.id)
        return GIVE_CHOOSE_WORKER
    else:
        await context.bot.send_message(chat_id=user.id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–∏—Ö –∫–æ–ª–ª–µ–≥ —è –Ω–µ –Ω–∞—à–µ–ª :(")
        return ConversationHandler.END

async def give_choose_worker(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user = query.from_user
    msgs_to_delete = [id for id in context.user_data['give_workers_msgs'] if id != query.message.id]
    for msg in msgs_to_delete:
        await context.bot.delete_message(chat_id=user.id, message_id=msg)
    worker_id = query.data.split('_')[1]
    context.user_data['give_worker'] = int(worker_id)
    new_text = query.message.text + "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É:"
    reasons = db_api.get_reasons()
    reply_markup = None
    if len(reasons) > 0:
        keyboard = []
        for reason in reasons:
            keyboard.append( 
                [
                    InlineKeyboardButton(f"{reason['text']}", callback_data=f"reason_{reason['id']}")
                ]
            )
        keyboard.append( 
            [
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="cancel")
            ]
        )
        reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text(text=new_text, reply_markup=reply_markup)
    return GIVE_CHOOSE_REASON

async def give_choose_reason(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user = query.from_user
    reason_id = int(query.data.split('_')[1])
    result = db_api.give_engines(user.id, context.user_data['give_worker'], reason_id)
    if result[0]:
        new_text = '\n'.join(query.message.text.split('\n')[0: -1]) + f"""
‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ 10 –¥–≤–∏–∂–∫–æ–≤!
–ó–∞: {db_api.get_reason_text(reason_id)}"""
        await query.message.edit_text(text=new_text, reply_markup=None)
        cheer = db_api.get_random_cheer()[0]
        reason = db_api.get_reason_text(reason_id)
        worker_user = db_api.get_user_by_worker_id(context.user_data['give_worker'])
        cheer_text = f'–í–∞–º –Ω–∞—á–∏—Å–ª–∏–ª –¥–≤–∏–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {db_api.get_user_name(user.id)}\n–ó–∞: {reason}\n\nüöÄ <i>{cheer}</i>'
        if worker_user:
            await context.bot.send_message(chat_id=worker_user, text=cheer_text, parse_mode='HTML')
        context.user_data.pop('give_worker')
        context.user_data.pop('give_workers_msgs')
    else:
        new_text = '\n'.join(query.message.text.split('\n')[0: -1]) + f"""
‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–≤–∏–∂–∫–æ–≤!
–ü—Ä–∏—á–∏–Ω–∞: {result[1]}"""
        await query.message.edit_text(text=new_text, reply_markup=None)
    return ConversationHandler.END

async def msg(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    f = open('uninformed')
    for l in f:
        await context.bot.send_message(chat_id=int(l.strip()), text="–í–∞—à–µ —É—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É! –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –∑–∞–¥–µ—Ä–∂–∫—É –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏.")
        logger.info(f'Message sent to: {l.strip()}')

async def reset_wallets(context: ContextTypes.DEFAULT_TYPE) -> None:
    db_api.reset_wallets(30);
    await context.bot.send_message(chat_id=ADMIN_ID, text='–î–≤–∏–∂–∫–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')

async def botstat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_chat.id 
    result = db_api.get_bot_stats();
    await context.bot.send_message(chat_id=user, text=result, parse_mode='HTML')

def main() -> None:

    token = open(os.path.abspath('token.txt')).read().strip()

    application = Application.builder().token(token).build()
    start_handler = ConversationHandler(
            entry_points=[CommandHandler("start", start)],
            states={
                AUTH: [MessageHandler(filters.Regex("^(–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)$"), auth)],
                FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_fio)],
                PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)]
            },
            fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    register_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(register_button, pattern='^register_.*')],
        states={
            WORKER_CHOICE: [CallbackQueryHandler(choose_worker, pattern='^worker_.*')],
            WORKER_NOT_FOUND: [MessageHandler(filters.Regex("^\d+$") & ~filters.COMMAND, assign_worker_id)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    , per_chat=False)
        
    give_handler = ConversationHandler(
            entry_points=[
                CommandHandler("give", give_start_cmnd),
                CallbackQueryHandler(give_start_cbq, pattern='^give$')
            ],
            states={
                GIVE_SEARCH: [MessageHandler(filters.TEXT & ~filters.COMMAND, give_search)],
                GIVE_CHOOSE_WORKER: [CallbackQueryHandler(give_choose_worker, pattern='^give_.*')],
                GIVE_CHOOSE_REASON: [CallbackQueryHandler(give_choose_reason, pattern='^reason_.*')],
            },
            fallbacks=[
                CommandHandler("cancel", cancel),
                CallbackQueryHandler(cancel_cbq, pattern='^cancel$')
            ]
    )
    reject_handler = CallbackQueryHandler(reject_button, pattern='^reject_.*')
    wallet_handler = CallbackQueryHandler(wallet_button, pattern='^wallet$')
    balance_handler = CallbackQueryHandler(balance_button, pattern='^balance$')
    wallet_command_handler = CommandHandler('wallet', wallet_command)
    balance_command_handler = CommandHandler('balance', balance_command)
    stats_handler = CallbackQueryHandler(stats_button, pattern='^stats$')
    application.add_handler(start_handler)
    application.add_handler(register_handler)
    application.add_handler(give_handler)
    application.add_handler(reject_handler)
    application.add_handler(wallet_handler)
    application.add_handler(balance_handler)
    application.add_handler(wallet_command_handler)
    application.add_handler(balance_command_handler)
    application.add_handler(stats_handler)
    bot_stats_command_handler = CommandHandler('botstat', botstat)
    application.add_handler(bot_stats_command_handler)
    time_at = datetime.time(hour=0, minute=0, second=0)
    application.job_queue.run_monthly(reset_wallets, time_at, 1, name='wallet_resetter')
    application.run_polling()

if __name__ == "__main__":

    main()
